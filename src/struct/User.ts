import Group from "./Group.js";
import Users from "../shared/models/VkUsersModel.js";
import Cache from "../lib/Cache.js";
import { Keyboard } from "vk-io";
import BaseUser from "../shared/structures/User.js";

export default class User extends BaseUser {
    group?: Group;
    token?: string | null;

    notifications: boolean = false;
    emoji: boolean = true;
    showSettings: boolean = true;
    showTeachers: boolean = true;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    async init() {
        let userData = await Users.findOne({ userId: this.id }).exec();

        if(userData?.inst_id && userData?.group) {
            await this.setGroup(userData.group, userData.inst_id);

            this.notifications = userData?.notifications ?? false;
            this.emoji = userData?.emoji ?? true;
            this.showSettings = userData?.showSettings ?? true;
            this.showTeachers = userData?.showTeachers ?? true;

            this.token = userData?.token;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async updateData(opt: { instId: number, group: string }) {
        await Users.findOneAndUpdate({userId: this.id}, { inst_id: opt.instId, group: opt.group }, { upsert: true });

        this.setGroup(opt.group, opt.instId);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã —É —á–µ–ª–æ–≤–µ–∫–∞
     */
    async setGroup(group:string, inst_id:number | string) {
        this.group = Cache.getGroup(group, +inst_id);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
     */
    async setToken(token:string) {
        this.token = token;

        let userData = await Users.findOne({userId: this.id}).exec();

        if(userData) {
            userData.token = token;
            userData.save().catch(console.log);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
     */
    async delete() {
        return Users.findOneAndDelete({userId: this.id});
        // TODO: –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ Cache.users
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    getMainKeyboard() {
        let keyboard = Keyboard.builder().textButton({
            label: (this.emoji ? "‚è∫Ô∏è " : "") + "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ",
            color: 'primary'
        }).textButton({
            label: (this.emoji ? "‚ñ∂Ô∏è " : "") + "–ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ",
            color: 'primary'
        }).row().textButton({
            label: (this.emoji ? "‚è© " : "") + "–ë–ª–∏–∂–∞–π—à–µ–µ",
            color: 'primary'
        }).textButton({
            label: (this.emoji ? "üîÄ " : "") + "–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å",
            color: 'primary'
        });

        if(this.showTeachers) keyboard.row().textButton({ label: (this.emoji ? "üë®‚Äçüè´ " : "") + "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π" })
        if(this.showSettings) keyboard.row().textButton({ label: (this.emoji ? "‚öôÔ∏è " : "") + "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" })

        return keyboard;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    getSettingsKeyboard() {
        return [
            [
                {
                    text: this.notifications ? ( (this.emoji ? "üîï " : "") + "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è") : ((this.emoji ? "üîî " : "") + "–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                },{
                    text: this.emoji ? ( (this.emoji ? "üôÖ‚Äç‚ôÇÔ∏è " : "") + "–í—ã–∫–ª—é—á–∏—Ç—å —ç–º–æ–¥–∑–∏") : "–í–∫–ª—é—á–∏—Ç—å —ç–º–æ–¥–∑–∏" // –¢—É—Ç –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ —Ç—É—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                }
            ],[
                {
                    text: (this.emoji ? "‚öôÔ∏è " : "") + "–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞"
                },{
                    text: this.showSettings ? ( (this.emoji ? "‚öôÔ∏è " : "") + "–£–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") : ((this.emoji ? "‚öôÔ∏è " : "") + "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                }
            ],[
                { // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –µ–º–æ–¥–∑–∏ –Ω–∞ –¥—Ä—É–≥–æ–µ
                    text: this.showTeachers ? ( (this.emoji ? "‚öôÔ∏è " : "") + "–£–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π") : ((this.emoji ? "‚öôÔ∏è " : "") + "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                }
            ],[
                {
                    text: (this.emoji ? "üõë " : "") + "–û—Ç–º–µ–Ω–∞"
                }
            ]
        ];
    }

    async updateLastActivity() {
        let user = await Users.findOne({userId: this.id}).exec();

        if(user) {
            user.lastActivity = new Date();
            user.save().catch(console.log);
        }
    }
}